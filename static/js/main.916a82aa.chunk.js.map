{"version":3,"sources":["logo.png","components/layout/header/Header.jsx","components/layout/masterLayout/MasterLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","logo","alt","type","placeholder","Component","MasterLayout","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,6RCoD5BC,EA/Cf,iLAEI,OACE,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,+CACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAChC,yBAAKD,UAAU,cAAcE,IAAKC,IAAMC,IAAI,WAGhD,yBAAKJ,UAAU,oBACb,uBAAGA,UAAU,iBAEf,0BAAMA,UAAU,oBACd,yBAAKA,UAAU,eACb,2BAAOK,KAAK,OAAOL,UAAU,eAAeM,YAAY,kBACxD,yBAAKN,UAAU,sBACb,0BAAMA,UAAU,oBAAhB,IAAoC,uBAAGA,UAAU,sBAIvD,yBAAKA,UAAU,4DACb,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAC5B,0BAAMD,UAAU,sBAAhB,MACA,uBAAGA,UAAU,wBAGjB,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAC5B,0BAAMD,UAAU,sBAAhB,KACA,uBAAGA,UAAU,+BAGjB,wBAAIA,UAAU,kBACZ,kBAAC,IAAD,CAAMA,UAAU,gBAAgBC,GAAG,KAAnC,IAAwC,0BAAMD,UAAU,YAAhB,gBAA8C,uBAAGA,UAAU,mDApCnH,GAA4BO,aCSbC,EAVf,iLAEI,OACE,yBAAKR,UAAU,kBACb,kBAAC,EAAD,WAJR,GAAkCO,aCSnBE,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.916a82aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.873d899c.png\";","import React, { Component } from 'react';\nimport logo from '../../../logo.png';\nimport './Header.css';\nimport { Link } from \"react-router-dom\";\n\nexport class Header extends Component {\n  render() {\n    return (\n      <header className=\"header\">\n        <nav className=\"navbar navbar-expand navbar-light fixed-top\">\n          <div className=\"border-logo\">\n            <Link className=\"navbar-brand\" to=\"/\">\n              <img className=\"images-logo\" src={logo} alt=\"Logo\" />\n            </Link>\n          </div>\n          <div className=\"btn-toggler ml-5\">\n            <i className=\"fas fa-bars\" />\n          </div>\n          <form className=\"form-inline ml-5\">\n            <div className=\"input-group\">\n              <input type=\"text\" className=\"form-control\" placeholder=\"Search for...\" />\n              <div className=\"input-group-append\">\n                <span className=\"input-group-text\"> <i className=\"fas fa-search\" /></span>\n              </div>\n            </div>\n          </form>\n          <div className=\"information collapse navbar-collapse justify-content-end\">\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"#\">\n                  <span className=\"badge badge-danger\">22</span>\n                  <i className=\"far fa-bell fa-lg\" />\n                </Link>\n              </li>\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"#\">\n                  <span className=\"badge badge-danger\">8</span>\n                  <i className=\"far fa-comment-alt fa-lg\" />\n                </Link>\n              </li>\n              <li className=\"nav-item clock\">\n                <Link className=\"nav-link name\" to=\"#\"> <span className=\"fullname\">Valerie Luna</span><i className=\"fas circle-user fa-user-circle fa-lg\" />\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport './MasterLayout.css';\nimport Header from '../header/Header';\n\nexport class MasterLayout extends Component {\n  render() {\n    return (\n      <div className=\"page-container\">\n        <Header></Header>\n      </div>\n    )\n  }\n}\n\nexport default MasterLayout\n","import React from 'react';\nimport './App.css';\nimport MasterLayout from './components/layout/masterLayout/MasterLayout';\nimport { BrowserRouter as Router} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <MasterLayout></MasterLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}